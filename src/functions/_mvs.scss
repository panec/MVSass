//**
// Additional functions to handle MVS syntax in SASS.

//**
// Gets value on $n position from MVS syntax
// If value on $n position not exists, last value is returned
// Params
// 	$list (Sass::Script::Value::Base)
// Returns
// 	(Sass::Script::Value::Base)
// Example
// 	mvs-get-nth( ( 1.1, 2.2, 3.3, 4.4, 5.5 ), 4 ) => 4.4
// 	mvs-get-nth( ( 1.1, 2.2 ), 4 ) => 2.2
@function mvs-get-nth( $list, $n ) {
	$length: length( $list );

	@if $length == 0 {
		@warn "mvs-get-nth is for $list" $list " containing at least 1 element, list contains 0 elements";
		@return null
	}
	@else if ( $n <= $length ) {
		@return nth( $list, $n );
	}
	@else {
		@return nth( $list, $length );
	}
}

//**
// Gets value on $n position from CSS shorthand syntax
// If value on $n position not exists, corresponding value is returned
// Params
// 	$list (Sass::Script::Value::Base)
// Returns
// 	(Sass::Script::Value::Base)
// Example
// 	get-nth-shorthand( 1px 2px 3px 4px ), 3 ) => 3px
// 	get-nth-shorthand( 1px 2px , 3 ) => 1px
@function get-nth-shorthand( $list, $n ) {
	$length: length( $list );

	@if $length == 0 {
		@warn "get-nth-shorthand is for $list" $list " containing 1, 2, or 4 elements, list contains 0 elements";
	}
	@else if $length == 1 {
		@return nth( $list, 1 );
	}
	@else if $length == 2 or $length == 3 {
		@if $n == 1 {
			@return nth( $list, 1 );
		}
		@else if $n == 2 {
			@return nth( $list, 2 );
		}
		@else if $n == 3 {
			@return nth( $list, 1 );
		}
		@else if $n == 4 {
			@return nth( $list, 2 );
		}
	}
	@else if $length == 4 {
		@return nth( $list, $n );
	}
	@else {
		@warn "get-nth-shorthand is for $list containing less then 5 elements";
		@return null;
	}
}

//**
// Calls custom function against each set of values from MVS syntax
// Params
// 	$list (Sass::Script::Value::Base)
// 	$name (Sass::Script::Value::String)
// Returns
// 	(Sass::Script::Value::Base)
// Example
// 	mvs-call( ( 1.1, ( 1.1, 2.2, 3.3, 4.4, 5.5 ) ), ceil ) => 1, ( 1, 2, 3, 4, 5 )
@function mvs-call( $list, $name ){
	$result: ();

	$result: append( $result, call( $name, nth( $list, 1 ) ), comma );

	@for $i from 2 through length( $list ) {
		$subResult: ();
		@if mvs-is-nth( nth( $list, $i ) ) == true {
			@warn "nth notation is not currently supported";
		}
		@else {
			@each $subValue in nth( $list, $i ) {
				$subResult: append( $subResult, call( $name, $subValue ) , comma );
			}
			$result: append( $result, $subResult );
		}
	}

	@return $result;
}

//**
// Gets a first parent selector from all list of parent selectors
// Returns
// 	(Sass::Script::Value::Base)
// Example
// 	.parent .item { mvs-parent() } => .parent .item
// 	.parent .subparent .item, { mvs-parent() } => .parent .subparent .item
// 	.parent .item, .parent_2 .item { mvs-parent() } => .parent .item
@function mvs-parent() {
	@if function-exists( parentsSelector ) {
		@return nth( parentsSelector(), 1 );
	}
	@else if type-of( & ) == "list" {
		@return nth( &, 1 );
	}

	@debug "Function 'parentsSelector' does not exist. Check if your project uses custom Ruby script provided, or update to SASS 3.4.x";
	@return null;
}

//TODO Add example calls and description
@function mvs-mod-to-string( $mod, $prefix: "", $modType: "class", $modDivider: "-" ){
	$result: "";

	@if $mod == null or $mod == ""{
		//do nothing
	}
	@else if type-of( $mod ) == "string" {
		$result: $result + $prefix + $modDivider + $mod;
	}
	@else if type-of( $mod ) == "map" {
		@each $key, $value in $mod {
			@if ( $modType == "data" ) {
			    $prefix: if( str-slice( $prefix, 1, 1 ) == ".", str-slice( $prefix, 2 ), $prefix );
				$result: $result + "[data-#{$prefix}--#{$key}='#{$value}']";
			}
			@else if ( $modType == "class" ) {
				$result: $result + $prefix + "--" + $key + $modDivider + $value;
			}
		}
	}
	@else {
		@warn "$mod is not a proper type, string & map are supported" $mod;
	}

	@return $result;
}

//TODO Add example calls and description
@function mvs-normalize-value( $value ) {
	$resultList            : ();
	$screenBreakpointsKeys : map-keys( $screen-breakpoints );

	@if type-of( $value ) != "map" and type-of( $value ) != "list" {
		$resultList: append( $resultList, ( "initial": $value ) );
	}

	@else if type-of( $value ) == "map" {
		$resultList: append( $resultList, $value );
	}

	@else if type-of( $value ) == "list" and list-separator( $value ) == "space" {
		$resultList: append( $resultList, ( "initial": $value ) );
	}

	@else if type-of( $value ) == "list" and list-separator( $value ) == "comma" {
		$map: ();
		$tempValue: ();
		$tempMap: ();
		$tempList: ();
		$screenBreakpointsKeysIndex: 1;

		@each $subValue in $value {
			$subValuePosition: mvs-value-position( $subValue );

			@if $subValuePosition == 1 {
				$subMap: map-get( $tempMap, "_1" );
				$tempMap: map-merge( $tempMap, ( "_1": if( $subMap == null, $subValue, append( $subMap, $subValue, comma ) ) ) );
			}
			@else if $subValuePosition == 2 {
				$subMap: map-get( $tempMap, "_2" );
				$tempMap: map-merge( $tempMap, ( "_2": if( $subMap == null, $subValue, append( $subMap, $subValue, comma ) ) ) );
			}
			@else if $subValuePosition == 3 {
				$subMap: map-get( $tempMap, "_3" );
				$tempMap: map-merge( $tempMap, ( "_3": if( $subMap == null, $subValue, append( $subMap, $subValue, comma ) ) ) );
			}
			@else if $subValuePosition == 4 {
				$subMap: map-get( $tempMap, "_4" );
				$tempMap: map-merge( $tempMap, ( "_4": if( $subMap == null, $subValue, append( $subMap, $subValue, comma ) ) ) );
			}
			@else if $subValuePosition == 5 {
				$subMap: map-get( $tempMap, "_5" );
				$tempMap: map-merge( $tempMap, ( "_5": if( $subMap == null, $subValue, append( $subMap, $subValue, comma ) ) ) );
			}
			@else {
				$tempList: append( $tempList, $subValue, comma );
			}
		}

		@each $subValue in $tempList {
			@if type-of( $subValue ) == "map" {
				$resultList: append( $resultList, map-merge( $subValue, $tempMap ) );
			}
			@else if type-of( $subValue ) == "list" and list-separator( $subValue ) == "comma" {
				$tempNormalize: mvs-normalize-value( $subValue );

				@each $subNormalize in $tempNormalize {
					$resultList: append( $resultList, map-merge( $subNormalize, $tempMap ) );
				}
			}
			@else {
				@if $screenBreakpointsKeysIndex == 1 {
					$tempValue: $subValue;
					$map: map-merge( $map, ( "initial": $subValue ) );
				}
				@else {
					@if $tempValue != $subValue {
						$tempValue: $subValue;
						$map: map-merge( $map, ( nth( $screenBreakpointsKeys, $screenBreakpointsKeysIndex ): $subValue ) );
					}
				}
				$screenBreakpointsKeysIndex: $screenBreakpointsKeysIndex + 1;
			}
		}

		//This couses a problem when a single css value is followed by maps or list on root level it is added at the end of result
		@if length( $map ) > 0 {
			$resultList: append( $resultList, map-merge( $map, $tempMap ) );
		}
	}

	@return $resultList;
}


//done
// return
// 0 - not specific value
// 1 - at body value
// 2 - at element value
// 3 - at list container value
// 4 - at block value ( for modifiers )
// 5 - at media
//TODO Add example calls and description
@function mvs-value-position( $value ) {
	$mediaTypes            : "all" "aural" "braille" "embossed" "handheld" "print" "projection" "screen" "tty" "tv" "only aural" "only braille" "only embossed" "only handheld" "only print" "only projection" "only screen" "only tty" "only tv";
	$modernizr             : ".applicationcache" ".audio" ".backgroundsize" ".borderimage" ".borderradius" ".boxshadow" ".canvas" ".canvastext" ".cssanimations" ".csscolumns" ".cssgradients" ".cssreflections" ".csstransforms" ".csstransforms3d" ".csstransitions" ".draganddrop" ".flexbox" ".flexboxlegacy" ".fontface" ".generatedcontent" ".geolocation" ".hashchange" ".history" ".hsla" ".indexedDB" ".inlinesvg" ".localstorage" ".multiplebgs" ".opacity" ".postmessage" ".rgba" ".sessionstorage" ".smil" ".svg" ".svgclippaths" ".textshadow" ".touch" ".video" ".webgl" ".websockets" ".websqldatabase" ".webworkers" ".no-applicationcache" ".no-audio" ".no-backgroundsize" ".no-borderimage" ".no-borderradius" ".no-boxshadow" ".no-canvas" ".no-canvastext" ".no-cssanimations" ".no-csscolumns" ".no-cssgradients" ".no-cssreflections" ".no-csstransforms" ".no-csstransforms3d" ".no-csstransitions" ".no-draganddrop" ".no-flexbox" ".no-flexboxlegacy" ".no-fontface" ".no-generatedcontent" ".no-geolocation" ".no-hashchange" ".no-history" ".no-hsla" ".no-indexedDB" ".no-inlinesvg" ".no-localstorage" ".no-multiplebgs" ".no-opacity" ".no-postmessage" ".no-rgba" ".no-sessionstorage" ".no-smil" ".no-svg" ".no-svgclippaths" ".no-textshadow" ".no-touch" ".no-video" ".no-webgl" ".no-websockets" ".no-websqldatabase" ".no-webworkers";
	$pseudoClasses         : ":active" ":after" ":before" ":checked" ":disabled" ":empty" ":enabled" ":first-letter" ":first-line" ":focus" ":hover" ":in-range" ":invalid" ":lang(language)" ":link" ":not(selector)" ":optional" ":out-of-range" ":read-only" ":read-write" ":required" ":root" ":selection" ":target" ":valid" ":visited" "::after" "::before" "::first-letter" "::first-line" ":selection";
	$pseudoClassesList     : ":first-child" ":first-of-type" ":last-child" ":last-of-type" ":nth-child" ":nth-last-child" ":nth-last-of-type" ":nth-of-type" ":only-child" ":only-of-type";

	@if type-of( $value ) != "string" and type-of( $value ) != "map" {
		@return 0; //css value
	}
	@else if is( $value, $mediaTypes ) {
		@return 5; //media type
	}
	@else if is( $value, $modernizr ) {
		@return 1; //body of the page
	}
	@else if is( $value, $pseudoClasses ) {
		@return 2; //current element
	}
	@else if type-of( $value ) == "map" {
		$valueKeys : join( "initial", map-keys( $screen-breakpoints ) );
		$keys      : map-keys( $value );

		@each $key in $keys
		{
			@if is( $key, $valueKeys ) {
				@return 0; //css value
			}
		}

		@return 4; //current element root parent
	}
	@else {
		//Cannot be is() because the "nth-..." syntax is not fixed and has custom value in brackets
		@each $string in $pseudoClassesList {
			@if str-index( $value, $string ) {
				@return 3; //current element list parent
			}
		}
	}

	@return 0; //css value
}
