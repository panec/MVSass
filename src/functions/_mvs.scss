//**
// Additional functions to handle MVS syntax in SASS.

//**
// Gets value on $n position from MVS syntax
// If value on $n position not exists, last value is returned
// Params
// 	$list (Sass::Script::Value::Base)
// Returns
// 	(Sass::Script::Value::Base)
// Example
// 	mvs-get-nth( ( 1.1, 2.2, 3.3, 4.4, 5.5 ), 4 ) => 4.4
// 	mvs-get-nth( ( 1.1, 2.2 ), 4 ) => 2.2
@function mvs-get-nth( $list, $n ) {
	$length: length( $list );

	@if $length == 0 {
		@warn "mvs-get-nth is for $list" $list " containing at least 1 element, list contains 0 elements";
		@return null
	}
	@else if ( $n <= $length ) {
		@return nth( $list, $n );
	}
	@else {
		@return nth( $list, $length );
	}
}

//** NOT USED ATM !!!
// Gets value on $n position from CSS shorthand syntax
// If value on $n position not exists, corresponding value is returned
// Params
// 	$list (Sass::Script::Value::Base)
// Returns
// 	(Sass::Script::Value::Base)
// Example
// 	get-nth-shorthand( 1px 2px 3px 4px ), 3 ) => 3px
// 	get-nth-shorthand( 1px 2px , 3 ) => 1px
@function get-nth-shorthand( $list, $n ) {
	$length: length( $list );

	@if $length == 0 {
		@warn "get-nth-shorthand is for $list" $list " containing 1, 2, or 4 elements, list contains 0 elements";
	}
	@else if $length == 1 {
		@return nth( $list, 1 );
	}
	@else if $length == 2 or $length == 3 {
		@if $n == 1 {
			@return nth( $list, 1 );
		}
		@else if $n == 2 {
			@return nth( $list, 2 );
		}
		@else if $n == 3 {
			@return nth( $list, 1 );
		}
		@else if $n == 4 {
			@return nth( $list, 2 );
		}
	}
	@else if $length == 4 {
		@return nth( $list, $n );
	}
	@else {
		@warn "get-nth-shorthand is for $list containing less then 5 elements";
		@return null;
	}
}

//**
// Calls custom function against each set of values from MVS syntax
// Params
// 	$list (Sass::Script::Value::Base)
// 	$name (Sass::Script::Value::String)
// Returns
// 	(Sass::Script::Value::Base)
// Example
// 	mvs-call( ( 1.1, ( 1.1, 2.2, 3.3, 4.4, 5.5 ) ), ceil ) => 1, ( 1, 2, 3, 4, 5 )
@function mvs-call( $list, $name ){
	$result: ();

	$result: append( $result, call( $name, nth( $list, 1 ) ), comma );

	@for $i from 2 through length( $list ) {
		$subResult: ();
		@if mvs-is-nth( nth( $list, $i ) ) == true {
			@warn "nth notation is not currently supported";
		}
		@else {
			@each $subValue in nth( $list, $i ) {
				$subResult: append( $subResult, call( $name, $subValue ) , comma );
			}
			$result: append( $result, $subResult );
		}
	}

	@return $result;
}

//**
// Gets a first parent selector from all list of parent selectors
// Returns
// 	(Sass::Script::Value::Base)
// Example
// 	.parent .item { mvs-parent() } => .parent .item
// 	.parent .subparent .item, { mvs-parent() } => .parent .subparent .item
// 	.parent .item, .parent_2 .item { mvs-parent() } => .parent .item
@function mvs-parent() {
	$ampersandList: &; //fix for LibSass

	@if function-exists( parentsSelector ) {
		@return nth( parentsSelector(), 1 );
	}
	@else if type-of( $ampersandList ) == "list" {
		@return nth( $ampersandList, 1 );
	}

	@debug "Function 'parentsSelector' does not exist. Check if your project uses custom Ruby script provided, or update to SASS 3.4.x";
	@return null;
}

//TODO Add example calls and description
@function mvs-mod-to-string( $mod, $prefix: "", $modType: "class", $modDivider: "-" ){
	$result: "";

	@if $mod == null or $mod == ""{
		//do nothing
	}
	@else if type-of( $mod ) == "string" {
		$result: $result + $prefix + $modDivider + $mod;
	}
	@else if type-of( $mod ) == "map" {
		@each $key, $value in $mod {
			@if ( $modType == "data" ) {
				$prefix: if( str-slice( $prefix, 1, 1 ) == ".", str-slice( $prefix, 2 ), $prefix );
				$result: $result + "[data-#{$prefix}--#{$key}='#{$value}']";
			}
			@else if ( $modType == "class" ) {
				$result: $result + $prefix + "--" + $key + $modDivider + $value;
			}
		}
	}
	@else {
		@warn "$mod is not a proper type, string & map are supported" $mod;
	}

	@return unquote( $result );
}

// TODO Add example calls and description
@function mvs-normalize-map( $map ) {
	$resultMap : ( );
	
	@each $selector, $propertiesMap in $map {
		$tempMap : ();
		
		@each $property, $values in $propertiesMap {
			@if $values == null {
				//skip
			}
			//TODO Refactor this section to be more readible
			@else if is( $property, $mvs-customMixins ) {
				@if not mixin-exists( $property ) {
					@warn "Property \"#{$property}\" is a custom mixin but does not exits";
				}
				@else {
					// @warn "Property \"#{$property}\" is a custom mixin and does exits";
					$tempMap: map-merge( $tempMap, ( $property: mvs-normalize-map( $values ) ) );
				}
			}
			@else if not is( $property, $mvs-cssProperties ) and not mixin-exists( $property ){
				@warn "Property \"#{$property}\" is not a valid CSS property & there is no mixin for it";
				@debug "TODO Add support for custom mixins";
			}
			@else if is( $property, "font-family" "font" ) {
				//TODO Can support if values are quoted on each breakpoint or quoutes are escaped
				@warn "MVS syntax does not support \"#{$property}\" property";
				$tempMap: map-merge( $tempMap, ( $property: $values ) );
			}
			@else {
				@debug "!!! VALUES " $values;
				$values : mvs-normalize-value( $values );
				@debug "!!! VALUES NORMALIZED" $values;
				$values : mvs-optimize-value( $values );
				@debug "!!! VALUES OPTIMIZED" $values;
				
				$tempMap: map-merge( $tempMap, ( $property: $values ) );
			}
		}
		
		$resultMap: map-merge( $resultMap, ( $selector: $tempMap ) );
	}
	
	@return $resultMap;
}

// TODO Add example calls and description
@function mvs-normalize-value( $value ) {
	$resultList            : ();
	$screenBreakpointsKeys : map-keys( $mvs-screenBreakpoints );

	@if type-of( $value ) != "map" and type-of( $value ) != "list" {
		$resultList: append( $resultList, ( nth( $screenBreakpointsKeys, 1 ): $value ) );
	}

	@else if type-of( $value ) == "map" {
		$resultList: append( $resultList, $value );
	}

	@else if type-of( $value ) == "list" and list-separator( $value ) == "space" {
		$resultList: append( $resultList, ( nth( $screenBreakpointsKeys, 1 ): $value ) );
	}

	@else if type-of( $value ) == "list" and list-separator( $value ) == "comma" {
		$map: ();
		$tempValue: ();
		$tempMap: ();
		$tempList: ();
		$screenBreakpointsKeysIndex: 1;

		@each $subValue in $value {
			$subValuePosition: mvs-value-position( $subValue );

			@if $subValuePosition == 1 {
				$subMap: map-get( $tempMap, "_1" );
				$tempMap: map-merge( $tempMap, ( "_1": if( $subMap == null, $subValue, append( $subMap, $subValue, comma ) ) ) );
			}
			@else if $subValuePosition == 2 {
				$subMap: map-get( $tempMap, "_2" );
				$tempMap: map-merge( $tempMap, ( "_2": if( $subMap == null, $subValue, append( $subMap, $subValue, comma ) ) ) );
			}
			@else if $subValuePosition == 3 {
				$subMap: map-get( $tempMap, "_3" );
				$tempMap: map-merge( $tempMap, ( "_3": if( $subMap == null, $subValue, append( $subMap, $subValue, comma ) ) ) );
			}
			@else if $subValuePosition == 4 {
				$subMap: map-get( $tempMap, "_4" );
				$tempMap: map-merge( $tempMap, ( "_4": if( $subMap == null, $subValue, append( $subMap, $subValue, comma ) ) ) );
			}
			@else if $subValuePosition == 5 {
				$subMap: map-get( $tempMap, "_5" );
				$tempMap: map-merge( $tempMap, ( "_5": if( $subMap == null, $subValue, append( $subMap, $subValue, comma ) ) ) );
			}
			@else {
				$tempList: append( $tempList, $subValue, comma );
			}
		}

		@each $subValue in $tempList {
			@if type-of( $subValue ) == "map" {
				$resultList: append( $resultList, map-merge( $subValue, $tempMap ) );
			}
			@else if type-of( $subValue ) == "list" and list-separator( $subValue ) == "comma" {
				$tempNormalize: mvs-normalize-value( $subValue );

				@each $subNormalize in $tempNormalize {
					$resultList: append( $resultList, map-merge( $subNormalize, $tempMap ) );
				}
			}
			@else {
				// @if $screenBreakpointsKeysIndex == 1 {
				// 	$tempValue: $subValue;
				// 	$map: map-merge( $map, ( nth( $screenBreakpointsKeys, 1 ): $subValue ) );
				// }
				// @else {
				// 	@if $tempValue != $subValue {
				// 		$tempValue: $subValue;
				// 		$map: map-merge( $map, ( nth( $screenBreakpointsKeys, $screenBreakpointsKeysIndex ): $subValue ) );
				// 	}
				// }
				// $screenBreakpointsKeysIndex: $screenBreakpointsKeysIndex + 1;

				$map: map-merge( $map, ( nth( $screenBreakpointsKeys, $screenBreakpointsKeysIndex ): $subValue ) );
				$screenBreakpointsKeysIndex: $screenBreakpointsKeysIndex + 1;
			}
		}

		//This couses a problem when a single css value is followed by maps or list on root level it is added at the end of result
		@if length( $map ) > 0 {
			$resultList: append( $resultList, map-merge( $map, $tempMap ) );
		}
	}

	@return $resultList;
}

// TODO Add example calls and description
@function mvs-optimize-value( $value ) {
	$resultList                 : ();
	$screenBreakpointsKeys      : map-keys( $mvs-screenBreakpoints );
	$screenBreakpointsKeysIndex : 1;

	@each $mvsMap in $value {
		$tempValue : ();
		$tempMap   : ();

		$subValue: map-get( $mvsMap, "_1" );
		$tempMap: map-merge( $tempMap, ( "_1": $subValue ) );

		$subValue: map-get( $mvsMap, "_2" );
		$tempMap: map-merge( $tempMap, ( "_2": $subValue ) );

		$subValue: map-get( $mvsMap, "_3" );
		$tempMap: map-merge( $tempMap, ( "_3": $subValue ) );

		$subValue: map-get( $mvsMap, "_4" );
		$tempMap: map-merge( $tempMap, ( "_4": $subValue ) );

		$subValue: map-get( $mvsMap, "_5" );
		$tempMap: map-merge( $tempMap, ( "_5": $subValue ) );

		@for $i from 1 through length( $screenBreakpointsKeys ) {
			$subValue: map-get( $mvsMap, nth( $screenBreakpointsKeys, $i ) );

			@if $i == 1 {
				$tempValue: $subValue;
				$tempMap: map-merge( $tempMap, ( nth( $screenBreakpointsKeys, $i ): $subValue ) );
			}
			@else if $tempValue != $subValue {
				$tempValue: $subValue;
				$tempMap: map-merge( $tempMap, ( nth( $screenBreakpointsKeys, $i ): $subValue ) );
			}
		}

		// TODO Add support for nth syntax
		// It is not a map with nth values
		// @if map-get( $tempMap, "_3" ) == null {

		// }
		// @else {

		// }

		$resultList: append( $resultList, $tempMap );
	}

	@return $resultList;
}

//**
// Overwrite keys from $map1 with keys from map $map2 only when value for that key is different
// Outputs warning if $showWarnings is true and key from $map2 do not exist in $map1
// TODO THIS VERSION SHOULD WORK ON VALUE BASE - needs to analyse the values globally not on level of css property value
// @function mvs-map-unique( $map1, $map2, $showWarnings: false ) {
// 	$result: ();
	
// 	@debug MAP1 $map1;
// 	@debug MAP2 $map2;
	
// 	@each $key, $value in $map2 {
		
// 		@debug KEY $key VALUE $value;
		
// 		@debug mvs-normalize-value( map-get( $map1, $key ) );
// 		@debug mvs-normalize-value( $value );
		
// 		@if ( $showWarnings ){
// 			@warn $key "does not exist in first map";
// 		}
		
// 		@if ( map-has-key($map1, $key) ) {
// 			$result: map-merge($result, map-unique( mvs-normalize-value( map-get( $map1, $key ) ), mvs-normalize-value( $value ) ) );
// 		}
// 		@else {
// 			$result: map-merge($result, ( $key: mvs-normalize-value( $value ) ) );
// 		}
		
// 	}

// 	@return $result;
// }


//done
// return
// 0 - not specific value
// 1 - at body value
// 2 - at element value
// 3 - at list container value
// 4 - at block value ( for modifiers )
// 5 - at media
//TODO Add example calls and description
@function mvs-value-position( $value ) {
	@if type-of( $value ) != "string" and type-of( $value ) != "map" {
		@return 0; //css value
	}
	@else if is( $value, $mvs-cssMediaTypes ) {
		@return 5; //media type
	}
	@else if is( $value, $mvs-cssModernizrClasses ) {
		@return 1; //body of the page
	}
	@else if is( $value, $mvs-cssPseudoClasses ) {
		@return 2; //current element
	}
	@else if type-of( $value ) == "map" {
		$screenBreakpointsKeys : map-keys( $mvs-screenBreakpoints );
		// TODO Reconsider using nth( $screenBreakpointsKeys, 1 )
		// $valueKeys : join( nth( $screenBreakpointsKeys, 1 ), map-keys( $mvs-screenBreakpoints ) );
		$keys: map-keys( $value );

		@each $key in $keys
		{
			@if is( $key, $screenBreakpointsKeys ) {
				@return 0; //css value
			}
		}

		@return 4; //current element root parent
	}
	@else {
		//Cannot be is() because the "nth-..." syntax is not fixed and has custom value in brackets
		@each $string in $mvs-cssPseudoClassesNth {
			@if str-index( $value, $string ) {
				@return 3; //current element list parent
			}
		}
	}

	@return 0; //css value
}
