//**
// Additional functions to handle MVS syntax in SASS.

//**
// Gets value on $n position from MVS syntax
// If value on $n position not exists, last value is returned
// Params
// 	$list (Sass::Script::Value::Base)
// Returns
// 	(Sass::Script::Value::Base)
// Example
// 	mvs-get-nth( ( 1.1, 2.2, 3.3, 4.4, 5.5 ), 4 ) => 4.4
// 	mvs-get-nth( ( 1.1, 2.2 ), 4 ) => 2.2
@function mvs-get-nth( $list, $n ) {
	$length: length( $list );

	@if $length == 0 {
		@warn "mvs-get-nth is for $list" $list " containing at least 1 element, list contains 0 elements";
		@return null
	}
	@else if ( $n <= $length ) {
		@return nth( $list, $n );
	}
	@else {
		@return nth( $list, $length );
	}
}

//**
// Gets value on $n position from CSS shorthand syntax
// If value on $n position not exists, corresponding value is returned
// Params
// 	$list (Sass::Script::Value::Base)
// Returns
// 	(Sass::Script::Value::Base)
// Example
// 	get-nth-shorthand( 1px 2px 3px 4px ), 3 ) => 3px
// 	get-nth-shorthand( 1px 2px , 3 ) => 1px
@function get-nth-shorthand( $list, $n ) {
	$length: length( $list );

	@if $length == 0 {
		@warn "get-nth-shorthand is for $list" $list " containing 1, 2, or 4 elements, list contains 0 elements";
	}
	@else if $length == 1 {
		@return nth( $list, 1 );
	}
	@else if $length == 2 or $length == 3 {
		@if $n == 1 {
			@return nth( $list, 1 );
		}
		@else if $n == 2 {
			@return nth( $list, 2 );
		}
		@else if $n == 3 {
			@return nth( $list, 1 );
		}
		@else if $n == 4 {
			@return nth( $list, 2 );
		}
	}
	@else if $length == 4 {
		@return nth( $list, $n );
	}
	@else {
		@warn "get-nth-shorthand is for $list containing less then 5 elements";
		@return null;
	}
}

//**
// Checks if MVS value contains CSS "nth" values
// Supported CSS values: "nth-child", "nth-of-type", "first-child", "last-child"
// Params
// 	$values (Sass::Script::Value::Base)
// Returns
// 	(Sass::Script::Value::Bool)
// Example
// 	mvs-is-nth( ( 1.1, 2.2, 3.3, 4.4, 5.5 ) ) => false
// 	mvs-is-nth( ( ":nth-child(2n)", 1.1, 2.2, 3.3, 4.4, 5.5 ) ) => true
// @function mvs-is-nth( $values ) {
// 	$subValue: nth( $values, 1 );

// 	@if type-of( $subValue ) != "string" {
// 		@return false;
// 	}
// 	@else {
// 		$index: 0;
// 		$nthStrings: "nth-child" "nth-of-type" "first-child" "last-child";

// 		@each $subString in $nthStrings {
// 			$index: $index + if( str-index( $subValue, $subString ), str-index( $subValue, $subString ), 0 );
// 		}

// 		@return $index > 0;
// 	}
// }

//**
// Calls custom function against each set of values from MVS syntax
// Params
// 	$list (Sass::Script::Value::Base)
// 	$name (Sass::Script::Value::String)
// Returns
// 	(Sass::Script::Value::Base)
// Example
// 	mvs-call( ( 1.1, ( 1.1, 2.2, 3.3, 4.4, 5.5 ) ), ceil ) => 1, ( 1, 2, 3, 4, 5 )
@function mvs-call( $list, $name ){
	$result: ();

	$result: append( $result, call( $name, nth( $list, 1 ) ), comma );

	@for $i from 2 through length( $list ) {
		$subResult: ();
		@if mvs-is-nth( nth( $list, $i ) ) == true {
			@warn "nth notation is not currently supported";
		}
		@else {
			@each $subValue in nth( $list, $i ) {
				$subResult: append( $subResult, call( $name, $subValue ) , comma );
			}
			$result: append( $result, $subResult );
		}
	}

	@return $result;
}

//**
// Transponds MVS map syntax to list syntax, allows for nesting MVS map syntax for nth selector
// Params
// 	$map (Sass::Script::Value::Base)
// 	$onlyResponsiveList (Sass::Script::Value::Bool)
// Returns
// 	(Sass::Script::Value::Base)
// Example
// 	mvs-map-to-list( ( initial: 50%, xxs: 50%, xs: 33.3%, sm: 25%, md: 20% ) ) => 50%, ( 50%, 33.3%, 25%, 20%, 20% )
// 	mvs-map-to-list( ( initial: 50%, xxs: 50%, xs: 33.3%, sm: 25%, md: 20% ), $onlyResponsiveList: true ) => 50%, 33.3%, 25%, 20%, 20%
// 	mvs-map-to-list( ( initial: null, ":nth-child(3n+4)": ( initial: null, md: left ) ) ) => null, ( ":nth-child(3n+4)", null, null, null, left, left )
// 	mvs-map-to-list( ( initial: null, ":nth-child(3n+4)": ( initial: null, md: left ) ), $onlyResponsiveList: true ) =>  null, null, null, null, null
// 	mvs-map-to-list( ( ":nth-child(3n+4)": ( initial: null, md: left ), $onlyResponsiveList: true ) =>  null, null, null, left, left
// @function mvs-map-to-list( $map, $onlyResponsiveList: false ){
// 	$result: ();
// 	$screenBreakpointsKeys : map-keys( $screen-breakpoints );
// 	$screenBreakpointsKeysLenght : length( $screenBreakpointsKeys );

// 	//Get initial value
// 	$initial: map_get( $map, "initial" );

// 	//Append initial value
// 	$result: append( $result, $initial, comma );

// 	//TODO Add settings to include support for syntax when they receive initial setting or previous value

// 	//Create null list with initial values
// 	$subResult: ();
// 	@for $index from 1 through $screenBreakpointsKeysLenght {
// 		// $subResult: append( $subResult, $initial, comma );
// 		$subResult: append( $subResult, #{''}, comma ); //There is no real empty value
// 	}

// 	//Update values of that list with valued set in map
// 	@for $index from 1 through $screenBreakpointsKeysLenght {
// 		@if map-has-key( $map, nth( $screenBreakpointsKeys, $index ) ){
// 			$subResult: replace-nth( $subResult, $index, map_get( $map, nth( $screenBreakpointsKeys, $index ) ) );
// 		}
// 	}

// 	//Update null on the list to have previous value
// 	@for $index from 1 through $screenBreakpointsKeysLenght {
// 		@if nth( $subResult, $index ) == '' {
// 			@if $index == 1 {
// 				$subResult: replace-nth( $subResult, $index, $initial );
// 			}
// 			@else {
// 				$subResult: replace-nth( $subResult, $index, nth( $subResult, $index - 1 ) );
// 			}
// 		}
// 	}

// 	//Append them to the result
// 	$result: append( $result, $subResult, comma );

// 	//Get nth syntax values
// 	@each $key, $value in $map {
// 		@if mvs-is-nth( $key ) {
// 			@if type-of( $value ) == "map" {
// 				$result: append( $result, join( $key, mvs-map-to-list( $value, $onlyResponsiveList: true ), comma ), comma );
// 			}
// 			@else {
// 				$result: append( $result, join( $key, $value, comma ), comma );
// 			}
// 		}
// 	}

// 	@return if( $onlyResponsiveList, $subResult, $result );
// }

//TODO Add example calls and description
@function mvs-mod-to-string( $mod, $prefix: "", $modType: "class", $modDivider: "-" ){
	$result: "";

	@if $mod == null or $mod == ""{
		//do nothing
	}
	@else if type-of( $mod ) == "string" {
		$result: $result + $prefix + $modDivider + $mod;
	}
	@else if type-of( $mod ) == "map" {
		@each $key, $value in $mod {
			@if ( $modType == "data" ) {
			    $prefix: if( str-slice( $prefix, 1, 1 ) == ".", str-slice( $prefix, 2 ), $prefix );
				$result: $result + "[data-#{$prefix}--#{$key}='#{$value}']";
			}
			@else if ( $modType == "class" ) {
				$result: $result + $prefix + "--" + $key + $modDivider + $value;
			}
		}
	}
	@else {
		@warn "$mod is not a proper type, string & map are supported" $mod;
	}

	@return $result;
}

//TODO Add example calls and description
@function mvs-normalize-value( $value ) {
	$resultList            : ();
	$screenBreakpointsKeys : map-keys( $screen-breakpoints );

	@if type-of( $value ) != "map" and type-of( $value ) != "list" {
		$resultList: append( $resultList, ( "initial": $value ) );
	}

	@else if type-of( $value ) == "map" {
		$resultList: append( $resultList, $value );
	}

	@else if type-of( $value ) == "list" and list-separator( $value ) == "space" {
		$resultList: append( $resultList, ( "initial": $value ) );
	}

	@else if type-of( $value ) == "list" and list-separator( $value ) == "comma" {
		$map: ();
		$tempMap: ();
		$tempList: ();
		$screenBreakpointsKeysIndex: 1;

		@each $subValue in $value {
			@if mvs-value-position( $subValue ) == 1 {
				$subMap: map-get( $tempMap, "_1" );
				$tempMap: map-merge( $tempMap, ( "_1": if( $subMap == null, $subValue, append( $subMap, $subValue, space ) ) ) );
			}
			@else if mvs-value-position( $subValue ) == 2 {
				$subMap: map-get( $tempMap, "_2" );
				$tempMap: map-merge( $tempMap, ( "_2": if( $subMap == null, $subValue, append( $subMap, $subValue, space ) ) ) );
			}
			@else if mvs-value-position( $subValue ) == 3 {
				$subMap: map-get( $tempMap, "_3" );
				$tempMap: map-merge( $tempMap, ( "_3": if( $subMap == null, $subValue, append( $subMap, $subValue, space ) ) ) );
			}
			@else if mvs-value-position( $subValue ) == 4 {
				$subMap: map-get( $tempMap, "_4" );
				$tempMap: map-merge( $tempMap, ( "_4": if( $subMap == null, $subValue, append( $subMap, $subValue, space ) ) ) );
			}
			@else {
				$tempList: append( $tempList, $subValue, comma );
			}
		}

		@each $subValue in $tempList {
			@if type-of( $subValue ) == "map" {
				$resultList: append( $resultList, map-merge( $subValue, $tempMap ) );
			}
			@else if type-of( $subValue ) == "list" and list-separator( $subValue ) == "comma" {
				$tempNormalize: mvs-normalize-value( $subValue );

				@each $subNormalize in $tempNormalize {
					$resultList: append( $resultList, map-merge( $subNormalize, $tempMap ) );
				}
			}
			@else {
				@if $screenBreakpointsKeysIndex == 1 {
					$map: map-merge( $map, ( "initial": $subValue ) );
				}
				@else {
					$map: map-merge( $map, ( nth( $screenBreakpointsKeys, $screenBreakpointsKeysIndex ): $subValue ) );
				}
				$screenBreakpointsKeysIndex: $screenBreakpointsKeysIndex + 1;
			}
		}

		//This couses a problem when a single css value is followed by maps or list on root level it is added at the end of result
		@if length( $map ) > 0 {
			$resultList: append( $resultList, map-merge( $map, $tempMap ) );
		}
	}

	@return $resultList;
}


//done
// return
// 0 - not specific value
// 1 - at body value
// 2 - at element value
// 3 - at list container value
// 4 - at block value ( for modifiers )
//TODO Add example calls and description
@function mvs-value-position( $value ) {
	$atBody: ".flex" ".no-flex"; //TODO Fill modernizr & cssua values
	$atElement: ":hover" ":before" ":after"; //TODO Fill pseudo selectors & elements
	$atListElement: ":nth-child" ":nth-of-type" ":first-child" ":last-child";

	@if type-of( $value ) != "string" and type-of( $value ) != "map" {
		@return 0; //"value";
	}
	@else if is( $value, $atBody ) {
		@return 1; //"at-body";
	}
	@else if is( $value, $atElement ) {
		@return 2; //"at-body";
	}
	//TODO this is a very big assumption loop thru map_keys
	@else if type-of( $value ) == "map" {
		@if map-get( $value, "initial" ) == null {
			@return 4; //"at-block";
		}
		@else {
			@return 0; //"value";
		}
	}
	@else {
		//Cannot be is() because the nth syntax is not fixed
		@each $string in $atListElement {
			@if str-index( $value, $string ) {
				@return 3; //"at-list-element";
			}
		}
	}
	@return 0; //"value";
}
