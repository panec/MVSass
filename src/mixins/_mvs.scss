//**
// MVS mixins

//**
// Private mixin for handling rendering css with Compass mixins
// Params
// 	$property (Sass::Script::Value::String)
// 	$value (Sass::Script::Value::Base)
@mixin -mvs-respond-compass( $property, $value ) {
	//https://github.com/nex3/sass/issues/626#issuecomment-39012395 Feature under consideration SASS 3.4
	// @if mixin-exists( $property ) {
	// 	@include #{ $property }( $value );
	// }

	//TODO: Add full list of Compass mixins
	@if $property == background and mixin-exists( $property ){
		@include background( $value );
	}
	@else {
		#{$property}: $value;
	}
}

//**
// Private mixin for handling rendering css properties with values in MVS syntax
// Params
// 	$property (Sass::Script::Value::String)
// 	$value (Sass::Script::Value::Base)
// 	$value (Sass::Script::Value::Base)
// 	$selector (Sass::Script::Value::Base)
// 	$depth (Sass::Script::Value::Base)
// 	$nthSelector (Sass::Script::Value::Base)
@mixin -mvs-respond( $property, $value, $selector: null, $depth: 0, $nthSelector: null ) {
	@if type-of( $property ) != "null" and type-of( $value ) != "null" {
		@if type-of( $selector ) == "string" and ( $selector != null or $selector != "" ) {
			@include mvs-parent( "#{$selector}#{$nthSelector}", true, $depth ) {
				@include -mvs-respond-compass( $property, $value );
			}
		}
		@else {
			@include mvs-parent( "#{$nthSelector}", false, $depth ) {
				@include -mvs-respond-compass( $property, $value );
			}
		}
	}
}

//**
// Generates styles for property in MVS syntax
// $selector defines parent selector to inject if MVS nth notation was used, if "" result will be appended
// $depth defines how many parent selectors skip to inject $selector
// Params
// 	$property (Sass::Script::Value::String)
// 	$values (Sass::Script::Value::Base)
// 	$selector (Sass::Script::Value::String)
// 	$depth (Sass::Script::Value::Number)
// Example
// 	mvs-respond( "border-width", 1px, ( 1px, 1px, 2px ) );
// 	mvs-respond( "border-width", 1px, ( 1px, 1px, 2px ), " li" );
// 	mvs-respond( "border-width", 1px, ( 1px, 1px, 2px ), " li", 1 );
// 	mvs-respond( "border-width", 1px, ( 1px, 1px, 2px ), "", 1 );
@mixin mvs-respond( $property, $values, $selector: null, $depth: 0 ) {
	@if $property == "font-family" or $property == "font" or $property == "z-index" {
		@warn "MVS syntax does not support font & font-family property";
		@include -mvs-respond( $property, $values, $selector, $depth );
	}
	@else {
		$values                  : if( list-separator($values) == "space", ( $values, ), $values );
		$length                  : length($values);
		$defaultValue            : nth($values, 1);
		$screen-breakpoints-keys : map-keys( $screen-breakpoints );

		@include -mvs-respond( $property, $defaultValue, $selector, $depth );

		@if $length > 1 {
			@for $i from 2 through $length {
				$lastValue   : $defaultValue;
				
				$subValues   : nth($values, $i);
				$subLenght   : length($subValues);
				
				$isNthSyntax : mvs-is-nth($subValues);
				$nthSelector : if( $isNthSyntax, nth( $subValues, 1 ), null );

				@if $isNthSyntax {
					$subValues : slice( $subValues, 2 );
					$subLenght : length( $screen-breakpoints-keys );
				}

				@if $isNthSyntax == false and $defaultValue != nth( $subValues, 1 ){
					@warn "Default value" $defaultValue "is not equal to the first break point value" nth( $subValues, 1 );
				}

				@for $j from 1 through $subLenght {
					$currentValue: mvs-get-nth( $subValues, $j );

					// @if $isNthSyntax == false and $lastValue != $currentValue { //DOES NOT WORK, WHY????
					@if $isNthSyntax == false {
						@if $lastValue != $currentValue {
							$lastValue : $currentValue;

							@include respond-to( nth( $screen-breakpoints-keys, $j ) ) {
								@include -mvs-respond( $property, $lastValue, $selector, $depth );
							}
						}
					}
					@else {
						@include respond-to( nth( $screen-breakpoints-keys, $j ), $is-specific: true ){
							@include -mvs-respond($property, $currentValue, $selector, $depth, $nthSelector);
						}
					}
				}
			}
		}
	}
}

//**
// Calls mvs-respond mixin against all keys in $map that contain only $prefix and css property
// Params
// 	$prefix (Sass::Script::Value::String)
// 	$map (Sass::Script::Value::Base)
// 	$selector (Sass::Script::Value::Bool)
// 	$depth (Sass::Script::Value::Number)
// Example
// 	mvs-respond-map( "list-item", $map );
@mixin mvs-respond-map( $prefix, $map, $selector: null, $depth: 0 ) {
	$prefixLength: str-length( $prefix );

	@each $key, $value in $map {
		@if str-index( $key, $prefix ) != null {
			$property: str-slice( $key, $prefixLength + 1 );

			@if ( str-index-last( $property, "_" ) == false ){
				@include mvs-respond( str-slice( $key, $prefixLength + 1 ), $value, $selector, $depth );
			}
		}
	}
}

//**
// Generates styles for screen size bigger then defined breakpoint,
// If $is-specific is true then generates styles only for the defined breakpoint
// Params
// 	$breakpoint (Sass::Script::Value::String)
// 	$is-specific (Sass::Script::Value::Bool)
// Example
// 	respond-to( xs ) { color: #FFF; } => @media only screen and ( min-width: 480px ) { color: #FFF; }
// 	respond-to( xs, $is-specific: true ) { color: #FFF; } => @media only screen and ( min-width: 480px ) and ( max-width: 767px ) { color: #FFF; }
@mixin respond-to( $breakpoint, $is-specific: false) {
	@if $is-specific {
		$index: map-index( $screen-breakpoints, $breakpoint );
		
		@if $index < length( $screen-breakpoints ) {
			//loosly based on https://raw.githubusercontent.com/guardian/sass-mq/master/_mq.scss
			$max-width-unit: unit( map-nth( $screen-breakpoints, $index + 1 ) );
			@media only screen and ( min-width:  map-get( $screen-breakpoints, $breakpoint ) ) and ( max-width: if( $max-width-unit == "px" , map-nth( $screen-breakpoints, $index + 1 ) - 1, map-nth( $screen-breakpoints, $index + 1 ) - .01 ) ) { @content; }
			// @media only screen and ( min-width:  map-get( $screen-breakpoints, $breakpoint ) ) and ( max-width: map-nth( $screen-breakpoints, $index + 1 ) - 1 ) { @content; }
		}
		@else {
			@media only screen and ( min-width: map-get( $screen-breakpoints, $breakpoint ) ) { @content; }
		}
	}
	@else {
		@media only screen and ( min-width: map-get( $screen-breakpoints, $breakpoint ) ) { @content; }
	}
}

//Based on http://sassmeister.com/gist/7786284
//http://www.youtube.com/watch?feature=player_detailpage&v=-ZJeOJGazgE#t=1846

//**
// Injects or appends $selector into parent selector on position defined by $depth starting from last
// Params
// 	$selector (Sass::Script::Value::String)
// 	$inject (Sass::Script::Value::Bool)
// 	$depth (Sass::Script::Value::Number)
// Example
// 	.parent .item { mvs-parent( ":hover", true ) } => .parent .item :hover
// 	.parent .item { mvs-parent( ":hover", false ) } => .parent .item:hover
// 	.parent .item { mvs-parent( " .test", true ) } => .parent .item .test
// 	.parent .item { mvs-parent( ":hover", false, 1 ) } => .parent .item:hover
// 	.parent .item { mvs-parent( " .test", true, 1 ) } => .parent .test .item
@mixin mvs-parent( $selector, $inject: true, $depth: 0 ) {
	@if $depth > 0 {
		@at-root {

			$path: "";
			
			// Custom ruby script, because SASS 3.4 do not resolves '&' for scripts
			@if function-exists( parentsSelector ) {
				$path: nth( parentsSelector(), 1 ); 
			}
			@else {
				@debug "Function 'parentsSelector' does not exist. Check if your project uses custom Ruby script provided";
			}

			@if $inject {
				#{insert-nth( $path, length( $path ) - $depth + 1, unquote( $selector ) )} { @content; }
			}
			@else {
				#{replace-nth( $path, length( $path ) - $depth, nth( $path, length( $path ) - $depth ) + unquote( $selector ) )} { @content; }
			}
		}
	}
	@else {
		&#{$selector} { @content; }
	}
}